// 비동기 함수로 이미지를 선택하고 업로드하는 과정을 처리합니다.
  Future<List<String>> _pickImage() async {
    final ImagePicker _picker = ImagePicker(); // ImagePicker 객체를 생성합니다.
    final List<XFile>? selectedImages = await _picker.pickMultiImage(); // 사용자가 여러 이미지를 선택할 수 있게 합니다.
    List<String> uploadImageUrls = []; // 업로드된 이미지의 URL들을 저장할 리스트입니다.

    // 선택된 이미지들이 있는지 확인합니다.
    if (selectedImages != null && selectedImages.isNotEmpty) {
      List<File> imageFiles = selectedImages.map((xFile) => File(xFile.path)).toList();

      // 선택된 이미지를 보여주고 업로드를 진행할지 결정하는 UI
      bool shouldUpload = await showDialog(
        context: context,
        builder: (context) => AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(30.0),
          ),
          title: Text('사진 확인',
             style: TextStyle(fontWeight: FontWeight.bold, fontSize: 24, color: Colors.black87),
             textAlign: TextAlign.center,),
          content: Container(
            height: 300,
            width: double.infinity,
            child: SingleChildScrollView(
              child: Column(
                children: imageFiles.map((file) => Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8.0),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(25.0),
                    child: Image.file(file, fit: BoxFit.cover),
                  ),
                )).toList(),
              ),
            ),
          ),
          actionsAlignment: MainAxisAlignment.spaceEvenly,
          actions: <Widget>[
            ElevatedButton.icon(
              icon: Icon(Icons.send),
              label: Text('보내기'),
              style: ElevatedButton.styleFrom(
                primary: Colors.orangeAccent,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                ),
                padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
              ),
              onPressed: () => Navigator.of(context).pop(true),
            ),
            ElevatedButton.icon(
              icon: Icon(Icons.cancel),
              label: Text('취소'),
              style: ElevatedButton.styleFrom(
                primary: Colors.grey,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                ),
                padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
              ),
              onPressed: () => Navigator.of(context).pop(false),
            ),
          ],
        ),
      );

      // 사용자가 업로드를 선택한 경우
      if (shouldUpload) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("이미지 업로드 중...", textAlign: TextAlign.center,),
            duration: Duration(seconds: 2),
          ),
        );

        // 이미지 업로드 비동기 처리
        for (var imageFile in imageFiles) {
          Reference storageReference = FirebaseStorage.instance
              .ref()
              .child('images/${DateTime.now().millisecondsSinceEpoch}');
          UploadTask uploadTask = storageReference.putFile(imageFile);
          TaskSnapshot taskSnapshot = await uploadTask;
          String downloadUrl = await taskSnapshot.ref.getDownloadURL();
          uploadImageUrls.add(downloadUrl);
        }

        // // 모든 이미지 업로드 후 사용자에게 알림
        // ScaffoldMessenger.of(context).showSnackBar(
        //   SnackBar(
        //     content: Text("이미지 업로드 완료!"),
        //     duration: Duration(seconds: 2),
        //   ),
        // );
        // Navigator.of(context).pop(uploadImageUrls);
      } else {
        Navigator.of(context).pop([]);
      }
    }
    return uploadImageUrls; // 선택된 이미지가 없으면 빈 리스트를 반환합니다.
  }
