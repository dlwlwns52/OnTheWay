          body: Stack(
            children: [
              Column(
                children: [
                  SizedBox(height: 10),
                  Expanded(
                    child: StreamBuilder<List<DocumentSnapshot>>(
                      stream: notificationsStream,
                      builder: (context, snapshot) {
                        if (snapshot.hasError) {
                          return Center(child: Text('오류가 발생했습니다.'));
                        }
                        if (!snapshot.hasData) {
                          return Center(child: CircularProgressIndicator());
                        }
                        final notifications = snapshot.data!;

                        // 알림을 touch 상태에 따라 분리합니다.
                        final newNotifications = notifications.where((doc) {
                          final notification = doc.data() as Map<String, dynamic>;
                          return notification['touch'] == false;
                        }).toList();

                        final oldNotifications = notifications.where((doc) {
                          final notification = doc.data() as Map<String, dynamic>;
                          return notification['touch'] == true;
                        }).toList();

                        return ListView(
                          children: [
                            // 새로운 알림 섹션
                            if (newNotifications.isNotEmpty) ...[
                              Padding(
                                padding: const EdgeInsets.all(8.0),
                                child: Text('새로운 알림', style: TextStyle(fontWeight: FontWeight.bold)),
                              ),
                              ListView.separated(
                                shrinkWrap: true,
                                physics: NeverScrollableScrollPhysics(),
                                itemCount: newNotifications.length,
                                itemBuilder: (context, index) {
                                  final DocumentSnapshot doc = newNotifications[index];
                                  final notification = doc.data() as Map<String, dynamic>;
                                  final timestamp = notification['timestamp'] as Timestamp;
                                  final DateTime dateTime = timestamp.toDate();
                                  final String timeAgo = getTimeAgo(dateTime);

                                  final String nickname = notification['helper_email_nickname'] ?? '알 수 없는 사용자';
                                  final Color avatarColor = _getColorFromName(nickname);

                                  return ListTile(
                                    leading: CircleAvatar(
                                      backgroundColor: avatarColor,
                                      child: Icon(Icons.person, color: Colors.white),
                                    ),
                                    title: Row(
                                      children: [
                                        Column(
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: [
                                            Text(
                                              notification['helper_email_nickname'] ?? '알 수 없는 사용자',
                                              style: TextStyle(
                                                fontFamily: 'NanumSquareRound',
                                                fontWeight: FontWeight.w900,
                                                fontSize: 16,
                                              ),
                                            ),
                                            SizedBox(height: 8),
                                            Text(
                                              '도와주기를 요청하였습니다.',
                                              style: TextStyle(
                                                fontFamily: 'NanumSquareRound',
                                                fontWeight: FontWeight.w600,
                                                fontSize: 14,
                                                color: Colors.grey[600],
                                              ),
                                            ),
                                            SizedBox(height: 6),
                                            Text(
                                              '$timeAgo',
                                              style: TextStyle(color: Colors.grey[600], fontSize: 14),
                                            ),
                                          ],
                                        ),
                                        Spacer(),
                                        Column(
                                          children: [
                                            FutureBuilder<String>(
                                              future: getGradeByNickname(notification['helper_email_nickname']),
                                              builder: (context, snapshot) {
                                                if (snapshot.connectionState == ConnectionState.waiting) {
                                                  return CircularProgressIndicator();
                                                } else if (snapshot.hasError) {
                                                  return Text('에러가 발생하였습니다.');
                                                } else if (!snapshot.hasData || snapshot.data == '정보 없음') {
                                                  return Text('정보 없음', style: TextStyle(color: Colors.grey, fontSize: 5));
                                                } else {
                                                  double gradeValue;
                                                  try {
                                                    gradeValue = double.parse(snapshot.data ?? '0');
                                                  } catch (e) {
                                                    gradeValue = 0.0;
                                                  }

                                                  Grade grade = Grade(gradeValue);
                                                  return isDeleteMode
                                                      ? Text('')
                                                      : Container(
                                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                                    decoration: BoxDecoration(
                                                      border: grade.border,
                                                      borderRadius: BorderRadius.circular(8),
                                                      color: grade.color2.withOpacity(0.05),
                                                    ),
                                                    child: Row(
                                                      children: [
                                                        Icon(Icons.school_outlined, color: grade.color),
                                                        SizedBox(width: 8),
                                                        Text(
                                                          grade.letter,
                                                          style: TextStyle(
                                                            fontWeight: FontWeight.bold,
                                                            color: grade.color,
                                                            fontSize: 13,
                                                          ),
                                                        ),
                                                        SizedBox(width: 7),
                                                        Column(
                                                          children: [
                                                            SizedBox(height: 12),
                                                            Text(
                                                              gradeValue.toStringAsFixed(2),
                                                              style: TextStyle(
                                                                fontWeight: FontWeight.bold,
                                                                color: grade.color,
                                                                fontSize: 8,
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ],
                                                    ),
                                                  );
                                                }
                                              },
                                            ),
                                          ],
                                        )
                                      ],
                                    ),
                                    onTap: () {
                                      HapticFeedback.lightImpact();
                                      // 터치한 알림의 touch 상태를 true로 업데이트
                                      FirebaseFirestore.instance.collection('helpActions').doc(doc.id).update({
                                        'touch': true,
                                      });
                                      _showAcceptDeclineDialog(context, nickname, doc.id);
                                    },
                                    trailing: isDeleteMode
                                        ? IconButton(
                                      icon: Icon(Icons.close, color: Colors.black),
                                      onPressed: () {
                                        HapticFeedback.lightImpact();
                                        _deleteNotification(doc.id);
                                        _deleteChatActions(doc.id);
                                      },
                                    )
                                        : null,
                                  );
                                },
                                separatorBuilder: (context, index) => Divider(),
                              ),
                            ],

                            Divider(),

                            // 지난 알림 섹션
                            if (oldNotifications.isNotEmpty) ...[
                              Padding(
                                padding: const EdgeInsets.all(8.0),
                                child: Text('지난 알림', style: TextStyle(fontWeight: FontWeight.bold)),
                              ),
                              ListView.separated(
                                shrinkWrap: true,
                                physics: NeverScrollableScrollPhysics(),
                                itemCount: oldNotifications.length,
                                itemBuilder: (context, index) {
                                  final DocumentSnapshot doc = oldNotifications[index];
                                  final notification = doc.data() as Map<String, dynamic>;
                                  final timestamp = notification['timestamp'] as Timestamp;
                                  final DateTime dateTime = timestamp.toDate();
                                  final String timeAgo = getTimeAgo(dateTime);

                                  final String nickname = notification['helper_email_nickname'] ?? '알 수 없는 사용자';
                                  final Color avatarColor = _getColorFromName(nickname);

                                  return ListTile(
                                    leading: CircleAvatar(
                                      backgroundColor: avatarColor,
                                      child: Icon(Icons.person, color: Colors.white),
                                    ),
                                    title: Row(
                                      children: [
                                        Column(
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: [
                                            Text(
                                              notification['helper_email_nickname'] ?? '알 수 없는 사용자',
                                              style: TextStyle(
                                                fontFamily: 'NanumSquareRound',
                                                fontWeight: FontWeight.w900,
                                                fontSize: 16,
                                              ),
                                            ),
                                            SizedBox(height: 8),
                                            Text(
                                              '도와주기를 요청하였습니다.',
                                              style: TextStyle(
                                                fontFamily: 'NanumSquareRound',
                                                fontWeight: FontWeight.w600,
                                                fontSize: 14,
                                                color: Colors.grey[600],
                                              ),
                                            ),
                                            SizedBox(height: 6),
                                            Text(
                                              '$timeAgo',
                                              style: TextStyle(color: Colors.grey[600], fontSize: 14),
                                            ),
                                          ],
                                        ),
                                        Spacer(),
                                        Column(
                                          children: [
                                            FutureBuilder<String>(
                                              future: getGradeByNickname(notification['helper_email_nickname']),
                                              builder: (context, snapshot) {
                                                if (snapshot.connectionState == ConnectionState.waiting) {
                                                  return CircularProgressIndicator();
                                                } else if (snapshot.hasError) {
                                                  return Text('에러가 발생하였습니다.');
                                                } else if (!snapshot.hasData || snapshot.data == '정보 없음') {
                                                  return Text('정보 없음', style: TextStyle(color: Colors.grey, fontSize: 5));
                                                } else {
                                                  double gradeValue;
                                                  try {
                                                    gradeValue = double.parse(snapshot.data ?? '0');
                                                  } catch (e) {
                                                    gradeValue = 0.0;
                                                  }

                                                  Grade grade = Grade(gradeValue);
                                                  return isDeleteMode
                                                      ? Text('')
                                                      : Container(
                                                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                                    decoration: BoxDecoration(
                                                      border: grade.border,
                                                      borderRadius: BorderRadius.circular(8),
                                                      color: grade.color2.withOpacity(0.05),
                                                    ),
                                                    child: Row(
                                                      children: [
                                                        Icon(Icons.school_outlined, color: grade.color),
                                                        SizedBox(width: 8),
                                                        Text(
                                                          grade.letter,
                                                          style: TextStyle(
                                                            fontWeight: FontWeight.bold,
                                                            color: grade.color,
                                                            fontSize: 13,
                                                          ),
                                                        ),
                                                        SizedBox(width: 7),
                                                        Column(
                                                          children: [
                                                            SizedBox(height: 12),
                                                            Text(
                                                              gradeValue.toStringAsFixed(2),
                                                              style: TextStyle(
                                                                fontWeight: FontWeight.bold,
                                                                color: grade.color,
                                                                fontSize: 8,
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ],
                                                    ),
                                                  );
                                                }
                                              },
                                            ),
                                          ],
                                        )
                                      ],
                                    ),
                                    onTap: () {
                                      HapticFeedback.lightImpact();
                                      // 지난 알림은 이미 touch 상태가 true이므로 업데이트 필요 없음
                                      _showAcceptDeclineDialog(context, nickname, doc.id);
                                    },
                                    trailing: isDeleteMode
                                        ? IconButton(
                                      icon: Icon(Icons.close, color: Colors.black),
                                      onPressed: () {
                                        HapticFeedback.lightImpact();
                                        _deleteNotification(doc.id);
                                        _deleteChatActions(doc.id);
                                      },
                                    )
                                        : null,
                                  );
                                },
                                separatorBuilder: (context, index) => Divider(),
                              ),
                            ],
                          ],
                        );
                      },
                    ),
                  ),
                ],
              ),
              if (_isAccepting)
                Positioned.fill(
                  child: Container(
                    color: Colors.grey.withOpacity(0.5),
                    child: Center(
                      child: Stack(
                        alignment: Alignment.center,
                        children: [
                          Lottie.asset(
                            'assets/lottie/congratulation.json',
                            width: double.infinity,
                            height: double.infinity,
                            fit: BoxFit.contain,
                          ),
                          Lottie.asset(
                            'assets/lottie/clapCute.json',
                            width: 300,
                            height: 300,
                            fit: BoxFit.contain,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
            ],
          ),

















return ListView(
  children: [
    if (newNotifications.isNotEmpty) ...[
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: Text('새로운 알림', style: TextStyle(fontWeight: FontWeight.bold)),
      ),
      ListView.separated(
        shrinkWrap: true,
        physics: NeverScrollableScrollPhysics(),
        itemCount: newNotifications.length,
        itemBuilder: (context, index) {
          final DocumentSnapshot doc = newNotifications[index];
          final notification = doc.data() as Map<String, dynamic>;
          final timestamp = notification['timestamp'] as Timestamp;
          final DateTime dateTime = timestamp.toDate();
          final String timeAgo = getTimeAgo(dateTime);

          final String nickname = notification['helper_email_nickname'] ?? '알 수 없는 사용자';

          return Container(
            margin: EdgeInsets.fromLTRB(20, 0, 20, 0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                SizedBox(height: 25),
                Container(
                  margin: EdgeInsets.fromLTRB(0, 0, 0, 30),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        margin: EdgeInsets.fromLTRB(0, 0, 0, 10),
                        child: Align(
                          alignment: Alignment.topLeft,
                          child: Text(
                            '새로운 알림',
                            style: TextStyle(
                              fontFamily: 'Pretendard',
                              fontWeight: FontWeight.w600,
                              fontSize: 16,
                              height: 1,
                              letterSpacing: -0.4,
                              color: Color(0xFF1D4786),
                            ),
                          ),
                        ),
                      ),
                      Container(
                        margin: EdgeInsets.fromLTRB(0, 0, 0, 10),
                        child: Container(
                          width: double.infinity,
                          decoration: BoxDecoration(
                            border: Border(
                              bottom: BorderSide(
                                color: Color(0xFFEEEEEE),
                                width: 1,
                              ),
                            ),
                          ),
                          child: Container(
                            padding: EdgeInsets.fromLTRB(0, 16, 0, 15),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Expanded(
                                  child: Container(
                                    margin: EdgeInsets.fromLTRB(0, 0, 26.9, 0),
                                    child: Row(
                                      mainAxisAlignment: MainAxisAlignment.start,
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Container(
                                          margin: EdgeInsets.fromLTRB(0, 0, 10, 30),
                                          child: Container(
                                            decoration: BoxDecoration(
                                              borderRadius: BorderRadius.circular(16),
                                            ),
                                            child: Container(
                                              child: SvgPicture.asset(
                                                'assets/pigma/person.svg',
                                                width: 30,
                                                height: 30,
                                              ),
                                            ),
                                          ),
                                        ),
                                        Column(
                                          mainAxisAlignment: MainAxisAlignment.start,
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: [
                                            Container(
                                              margin: EdgeInsets.fromLTRB(0, 0, 0, 10),
                                              child: Align(
                                                alignment: Alignment.topLeft,
                                                child: Text(
                                                  nickname,
                                                  style: TextStyle(
                                                    fontFamily: 'Pretendard',
                                                    fontWeight: FontWeight.w600,
                                                    fontSize: 16,
                                                    height: 1,
                                                    letterSpacing: -0.4,
                                                    color: Color(0xFF222222),
                                                  ),
                                                ),
                                              ),
                                            ),
                                            Container(
                                              margin: EdgeInsets.fromLTRB(0, 0, 0, 10),
                                              child: Text(
                                                '도와주기를 요청하였습니다.',
                                                style: TextStyle(
                                                  fontFamily: 'Pretendard',
                                                  fontWeight: FontWeight.w500,
                                                  fontSize: 14,
                                                  height: 1,
                                                  letterSpacing: -0.4,
                                                  color: Color(0xFF222222),
                                                ),
                                              ),
                                            ),
                                            Align(
                                              alignment: Alignment.topLeft,
                                              child: Text(
                                                timeAgo,
                                                style: TextStyle(
                                                  fontFamily: 'Pretendard',
                                                  fontWeight: FontWeight.w500,
                                                  fontSize: 12,
                                                  height: 1,
                                                  letterSpacing: -0.3,
                                                  color: Color(0xFFAAAAAA),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                                Container(
                                  margin: EdgeInsets.fromLTRB(0, 15, 0, 15),
                                  decoration: BoxDecoration(
                                    border: Border.all(color: Color(0xFF4B7CC5)),
                                    borderRadius: BorderRadius.circular(100),
                                    color: Color(0xFFFFFFFF),
                                  ),
                                  child: Container(
                                    padding: EdgeInsets.fromLTRB(14.5, 2.5, 19, 2.5),
                                    child: Row(
                                      mainAxisAlignment: MainAxisAlignment.start,
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Container(
                                          margin: EdgeInsets.fromLTRB(0, 0, 2, 0),
                                          child: Container(
                                            child: SvgPicture.asset(
                                              'assets/pigma/book.svg',
                                              width: 25,
                                              height: 25,
                                            ),
                                          ),
                                        ),
                                        Container(
                                          margin: EdgeInsets.fromLTRB(0, 5, 6.3, 5),
                                          child: Text(
                                            'A+',
                                            style: TextStyle(
                                              fontFamily: 'Pretendard',
                                              fontWeight: FontWeight.w700,
                                              fontSize: 14,
                                              height: 1,
                                              letterSpacing: -0.4,
                                              color: Color(0xFF1D4786),
                                            ),
                                          ),
                                        ),
                                        Container(
                                          margin: EdgeInsets.fromLTRB(0, 5, 0, 5),
                                          child: Text(
                                            '(4.5)',
                                            style: TextStyle(
                                              fontFamily: 'Pretendard',
                                              fontWeight: FontWeight.w500,
                                              fontSize: 14,
                                              height: 1,
                                              letterSpacing: -0.4,
                                              color: Color(0xFF767676),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
        separatorBuilder: (context, index) => Divider(),
      ),
    ],

    Divider(),

    // 지난 알림 섹션
    if (oldNotifications.isNotEmpty) ...[
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: Text('지난 알림', style: TextStyle(fontWeight: FontWeight.bold)),
      ),
      ListView.separated(
        shrinkWrap: true,
        physics: NeverScrollableScrollPhysics(),
        itemCount: oldNotifications.length,
        itemBuilder: (context, index) {
          final DocumentSnapshot doc = oldNotifications[index];
          final notification = doc.data() as Map<String, dynamic>;
          final timestamp = notification['timestamp'] as Timestamp;
          final DateTime dateTime = timestamp.toDate();
          final String timeAgo = getTimeAgo(dateTime);

          final String nickname = notification['helper_email_nickname'] ?? '알 수 없는 사용자';

          return Container(
            margin: EdgeInsets.fromLTRB(20, 0, 20, 0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                SizedBox(height: 25),
                Container(
                  margin: EdgeInsets.fromLTRB(0, 0, 0, 30),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        margin: EdgeInsets.fromLTRB(0, 0, 0, 10),
                        child: Align(
                          alignment: Alignment.topLeft,
                          child: Text(
                            '지난 알림',
                            style: TextStyle(
                              fontFamily: 'Pretendard',
                              fontWeight: FontWeight.w600,
                              fontSize: 16,
                              height: 1,
                              letterSpacing: -0.4,
                              color: Color(0xFF1D4786),
                            ),
                          ),
                        ),
                      ),
                      Container(
                        margin: EdgeInsets.fromLTRB(0, 0, 0, 10),
                        child: Container(
                          width: double.infinity,
                          decoration: BoxDecoration(
                            border: Border(
                              bottom: BorderSide(
                                color: Color(0xFFEEEEEE),
                                width: 1,
                              ),
                            ),
                          ),
                          child: Container(
                            padding: EdgeInsets.fromLTRB(0, 16, 0, 15),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Expanded(
                                  child: Container(
                                    margin: EdgeInsets.fromLTRB(0, 0, 26.9, 0),
                                    child: Row(
                                      mainAxisAlignment: MainAxisAlignment.start,
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Container(
                                          margin: EdgeInsets.fromLTRB(0, 0, 10, 30),
                                          child: Container(
                                            decoration: BoxDecoration(
                                              borderRadius: BorderRadius.circular(16),
                                            ),
                                            child: Container(
                                              child: SvgPicture.asset(
                                                'assets/pigma/person.svg',
                                                width: 30,
                                                height: 30,
                                              ),
                                            ),
                                          ),
                                        ),
                                        Column(
                                          mainAxisAlignment: MainAxisAlignment.start,
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: [
                                            Container(
                                              margin: EdgeInsets.fromLTRB(0, 0, 0, 10),
                                              child: Align(
                                                alignment: Alignment.topLeft,
                                                child: Text(
                                                  nickname,
                                                  style: TextStyle(
                                                    fontFamily: 'Pretendard',
                                                    fontWeight: FontWeight.w600,
                                                    fontSize: 16,
                                                    height: 1,
                                                    letterSpacing: -0.4,
                                                    color: Color(0xFF222222),
                                                  ),
                                                ),
                                              ),
                                            ),
                                            Container(
                                              margin: EdgeInsets.fromLTRB(0, 0, 0, 10),
                                              child: Text(
                                                '도와주기를 요청하였습니다.',
                                                style: TextStyle(
                                                  fontFamily: 'Pretendard',
                                                  fontWeight: FontWeight.w500,
                                                  fontSize: 14,
                                                  height: 1,
                                                  letterSpacing: -0.4,
                                                  color: Color(0xFF222222),
                                                ),
                                              ),
                                            ),
                                            Align(
                                              alignment: Alignment.topLeft,
                                              child: Text(
                                                timeAgo,
                                                style: TextStyle(
                                                  fontFamily: 'Pretendard',
                                                  fontWeight: FontWeight.w500,
                                                  fontSize: 12,
                                                  height: 1,
                                                  letterSpacing: -0.3,
                                                  color: Color(0xFFAAAAAA),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                                Container(
                                  margin: EdgeInsets.fromLTRB(0, 15, 0, 15),
                                  decoration: BoxDecoration(
                                    border: Border.all(color: Color(0xFF4B7CC5)),
                                    borderRadius: BorderRadius.circular(100),
                                    color: Color(0xFFFFFFFF),
                                  ),
                                  child: Container(
                                    padding: EdgeInsets.fromLTRB(14.5, 2.5, 19, 2.5),
                                    child: Row(
                                      mainAxisAlignment: MainAxisAlignment.start,
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Container(
                                          margin: EdgeInsets.fromLTRB(0, 0, 2, 0),
                                          child: Container(
                                            child: SvgPicture.asset(
                                              'assets/pigma/book.svg',
                                              width: 25,
                                              height: 25,
                                            ),
                                          ),
                                        ),
                                        Container(
                                          margin: EdgeInsets.fromLTRB(0, 5, 6.3, 5),
                                          child: Text(
                                            'A+',
                                            style: TextStyle(
                                              fontFamily: 'Pretendard',
                                              fontWeight: FontWeight.w700,
                                              fontSize: 14,
                                              height: 1,
                                              letterSpacing: -0.4,
                                              color: Color(0xFF1D4786),
                                            ),
                                          ),
                                        ),
                                        Container(
                                          margin: EdgeInsets.fromLTRB(0, 5, 0, 5),
                                          child: Text(
                                            '(4.5)',
                                            style: TextStyle(
                                              fontFamily: 'Pretendard',
                                              fontWeight: FontWeight.w500,
                                              fontSize: 14,
                                              height: 1,
                                              letterSpacing: -0.4,
                                              color: Color(0xFF767676),
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
        separatorBuilder: (context, index) => Divider(),
      ),
    ],
  ],
);
