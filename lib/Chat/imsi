
class NaverPostManager {

  FirebaseFirestore db = FirebaseFirestore.instance;


  String? getUserEmail() {
    // 현재 로그인한 사용자의 이메일 반환하는 메서드 정의
    final user = FirebaseAuth.instance.currentUser; // 현재 로그인한 사용자 정보 가져오기
    return user?.email; // 사용자의 이메일 반환
  }


  void helpPost(BuildContext context, DocumentSnapshot doc) async {
    try {
      User? currentUser = FirebaseAuth.instance.currentUser;

      // currentUser가 null인 경우, 즉 사용자가 로그인하지 않았다면, 오류 메시지를 표시하고 함수를 종료합니다.
      if (currentUser == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("로그인이 필요합니다.", textAlign: TextAlign.center,),
            duration: Duration(seconds: 2),
          ),
        );
        return;
      }

      String? helperEmail = getUserEmail(); // 도와주는 사용자의 이메일 가져오기

      String postOwnerEmail = doc['user_email']; // 게시물 작성자의 이메일
      // 'naver_posts' 컬렉션에서 해당 게시물의 'store' 값을 가져옵니다.
      DocumentSnapshot postDoc = await FirebaseFirestore.instance.collection('naver_posts').doc(doc.id).get();
      String postStore = postDoc['store']; // 게시물의 'store' 필드

      // 현재 시간을 기반으로 타임스탬프 생성
      String timestamp = DateTime.now().millisecondsSinceEpoch.toString();


      // 'naverUserHelpStatus' 컬렉션에서 특정 문서(도와주기 상태)를 가져옵니다.
      // 문서 이름은 postStore와 postOwnerEmail을 결합하여 생성됩니다.
      Map<String, dynamic> helpStatus = await getUserHelpClickStatus(postStore, postOwnerEmail);

      // 가져온 문서에서 docId를 키로 하는 상태를 확인합니다.
      // 문서가 없거나 해당 키가 없으면 기본값을 사용합니다.
      var postStatus = helpStatus[helperEmail] ?? {'clickCount': 0, 'lastClickedTime': DateTime(1970)};

      int clickCount = postStatus['clickCount']; // 클릭 횟수를 가져옵니다.
      // lastClickedTime을 가져오기 위한 초기화
      DateTime lastClickedTime;

      // postStatus에서 lastClickedTime이 Timestamp 형식인지 확인합니다.
      // Timestamp 형식이면 DateTime으로 변환하고, 아니면 기본값을 사용합니다.
      if (postStatus['lastClickedTime'] is Timestamp) {
        lastClickedTime = (postStatus['lastClickedTime'] as Timestamp).toDate();
      } else {
        lastClickedTime = postStatus['lastClickedTime'] ?? DateTime(1970);
      }

      // 도와주기 버튼 누른 사람 닉네임 users 컬렉션에서 조회한 후 변수에 저ㄹ장!
      // Firestore의 'users' 컬렉션에서 helperEmail에 해당하는 사용자 문서를 조회합니다.
      final usersCollection = FirebaseFirestore.instance.collection('users');
      final helpUserDoc = await usersCollection.where('email', isEqualTo: helperEmail).get(); // 도와주기 요청한 사람 이메일
      final ownerUserDoc = await usersCollection.where('email', isEqualTo: postOwnerEmail).get();

      // 사용자 문서가 존재하면 닉네임을 가져옵니다.
      String helperNickname = '';
      if (helpUserDoc.docs.isNotEmpty) {
        helperNickname = helpUserDoc.docs.first.data()['nickname'];
      } else {
        // 사용자 문서가 없다면 에러 처리를 합니다.
        // 예를 들어, 로그를 남기거나 사용자에게 피드백을 줄 수 있습니다.
        print('User document not found for email: $helperEmail');
        return;
      }

      String OwnerNickname = '';
      if (ownerUserDoc.docs.isNotEmpty){
        OwnerNickname = ownerUserDoc.docs.first.data()['nickname'];
      } else {
        // 사용자 문서가 없다면 에러 처리를 합니다.
        // 예를 들어, 로그를 남기거나 사용자에게 피드백을 줄 수 있습니다.
        print('User document not found for email: $helperEmail');
        return;
      }


      updateHelpClickStatus(postStore, postOwnerEmail, helperEmail!);

      // 문서 이름을 만듭니다. 예: "postStore_helperEmail_timestamp"
      String documentName = "${postStore}_${helperEmail}_$timestamp";
      // String documentName = "${postStore}_${helperEmail}";

      // Firestore에 '도와주기' 액션을 기록하면서 문서 이름을 설정합니다.
      await FirebaseFirestore.instance.collection('helpActions').doc(documentName).set({
        'University' : "naver",
        'post_id': doc.id,
        'owner_email_nickname' : OwnerNickname,
        'helper_email': helperEmail,
        'helper_email_nickname' : helperNickname,
        'owner_email': postOwnerEmail,
        'timestamp': DateTime.now(),
      });

      //채팅용 도움 따로 만듬 -> 아니면 알림을 삭제할때 같이 삭제
      await FirebaseFirestore.instance.collection('ChatActions').doc(documentName).set({
        'University' : "naver",
        'post_id': doc.id,
        'owner_email': postOwnerEmail,
        'owner_email_nickname' : OwnerNickname,
        'helper_helper_emailemail': helperEmail,
        'helper_email_nickname' : helperNickname,
        'timestamp': DateTime.now(),
      });

    } catch (e) {
      // 오류 메시지 표시
      // 대화상자를 닫고 스낵바 표시
      Navigator.of(context).pop();
      await ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("도와주기'요청이 전송이 실패하였습니다: $e",textAlign: TextAlign.center,),
          duration: Duration(seconds: 1),
        ),
      ).closed;
    }
  }
}







